
git help #provide basic help
git help cmd #provide help for cmd
git config --global user.name ritesh kumar #sets user name globally
git config --global user.email riteshkumar.bhumca2012@gmail.com #sets user email globally
git conifg --global color.ui true
#sets color display



git status #for status
git add <filename> #adding file
git log #for history


git commit -m msg #commit your changes

Done with Level1 in Git Real
Started level2 in Git real
git diff #use for unstaged differencs since last commit
git diff --staged #use for staged differencs since last commit
git reset HEAD filename #use for unstaginf files means reset the head to last commit
git commit -a -m msg #use for skipping staging .i.e. it commmits the files without adding to staging area
but it doesn't add new(untracked files
it takes the all changes back to staging area in latest commit and reset all files to previous commit
git reset --soft HEAD^
git commit --amend -m "learnt the idea how to add a file in already done commit" 

git reset --hard HEAD^ #undo last commit and all changes
git reset --hard HEAD^^ #undo last 2 commit and all changes

started Sharing idea
here we have added the link of repo Gittuorital to our local Git by #git remote add origin https://github.com/RiteshKumar92/GitTutorial1.git 
also we can list the remote respos by this cmd #git remote -v
so here we first use git pull <remote name> <branch name>
and the we push the changes using git push -u origin master #here u stands for first time as remote and branch
Working with Remote
git remote add <name> <addr>
git remote rm <name>
git push -u <remote> <branch>
git pull <remote> <branch>

Don't do these after push
moving files to stage area from a commit #git reset --soft HEAD^
adding files to an eariler commit #git commit --amend -m new msg
blowing all changes ince last commit #git reset --hard hEAD^

Done with leve2 in Git real
Started cloning and branching in level3 in Git real
use #git clone <addr> # to clone the remote respo in local clone
started Branching

git branch <bname>
git checkout <bname>
git branch #list all branches
git checkout -b <bname> #combination of 1 and 2 
merging a branch
git checkout master #destination branch
git merge Branch1 #source Branch
Fast forward means no work since branching on master
recursive mearge means Both have changed their Fields


git branch -d <bname> #deltes a branch

in case of merge fail edit the file with reqyuied changes and commit the changes anf go ahead
Done with level 3 in Git real
understaing push and pull
started level4 in Git real

git pull work in 2 steps
1. git fetch #it syncs our local clone with origing but doesn't update nay our local code
2. git merge origin/master 

git pull works as fwd or recursive merge
if merge issue arise resolve the issue and go ahead with #git commit -a

Done with level4 in Git real


Started Level5 and Remote branching

git checkout -b Branch2 #creates and switch 2 branch
git push origin Branch2 #links globally
git push origin Branch2 #push to the branch Branch2
git pull  #  to access remote branch
git branch #local branches
git branch -r #list all remote branches
git remote show origin #shows all remote branches and their refs
git push origin :Branch2 #deltes remote branch
git branch -d Brnach2 #removes locally
git branch -D Branch2 #if branch is not ully merged use this
git remote prune origin # to clean delted remote branche

#started tagging heres
git tag #list all tags
git tag -a <tagname> -m <tag description> #creating tag
git push --tags #pushing tags

